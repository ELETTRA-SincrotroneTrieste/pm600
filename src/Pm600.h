/*----- PROTECTED REGION ID(Pm600.h) ENABLED START -----*/
//=============================================================================
//
// file :        Pm600.h
//
// description : Include file for the Pm600 class
//
// project :     Pm600 McLennan
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef Pm600_H
#define Pm600_H

#include <tango.h>
#include <readthread.h>

#define GET_VERSION				"VE"

#define GET_STATE				"OS"
#define GET_ACTUAL_POSITION		"OA"
#define GET_COMMAND_POSITION	"OC"
#define GET_INPUT_POSITION		"OI"
#define GET_VELOCITY			"OV" //current velocity

#define QUERY_POSITIONS			"QP" //eg 01:CP = 0  AP = 0  IP = 0  TP = 0  OD = None
#define QUERY_SPEEDS			"QS" //eg 01:SC = 800  SV = 1000  SA = 2000  SD = 3000  LD = 50000

#define SET_ACTUAL_POSITION		"AP"
#define SET_COMMAND_POSITION	"CP"
#define SET_INPUT_POSITION		"IP"
#define SET_HOME_POSITION		"SH"

#define SET_ACCELERATION		"SA"
#define SET_DECELERATION		"SD"
#define SET_VELOCITY			"SV"
#define SET_CREEP_SPEED			"SC"

#define SET_ENODER_RATIO		"ER"
#define SET_GEARBOX_RATIO		"GR"

#define SET_DATUM_MODE			"DM"	//homing parameters, 1DM00100000 = default


#define MOVE_ABSOLUTE			"MA"
#define MOVE_RELATIVE			"MR"
#define STOP_MOTION				"ST"
#define RESET_CONTROLLER		"RS"
#define ENABLE					"MM"
#define DATUM_SEARCH			"HD"


/*----- PROTECTED REGION END -----*/	//	Pm600.h

/**
 *  Pm600 class description:
 *    
 */

namespace Pm600_ns
{
/*----- PROTECTED REGION ID(Pm600::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	Pm600::Additional Class Declarations

class Pm600 : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(Pm600::Data Members) ENABLED START -----*/

//	Add your own data members
	Tango::DeviceProxy *device_proxy;
	readthread *loop;
	omni_mutex *mutex;
	int consecutive_errors;

/*----- PROTECTED REGION END -----*/	//	Pm600::Data Members

//	Device property data members
public:
	//	DeviceName:	serial device
	string	deviceName;
	//	ControllerAddr:	
	Tango::DevLong	controllerAddr;
	//	PositionRatio:	
	Tango::DevDouble	positionRatio;

//	Attribute data members
public:
	Tango::DevDouble	*attr_Position_read;
	Tango::DevDouble	*attr_Velocity_read;
	Tango::DevDouble	*attr_Acceleration_read;
	Tango::DevDouble	*attr_Deceleration_read;
	Tango::DevDouble	*attr_CreepSpeed_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Pm600(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Pm600(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	Pm600(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~Pm600() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : Pm600::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : Pm600::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute Position related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Position(Tango::Attribute &attr);
	virtual void write_Position(Tango::WAttribute &attr);
	virtual bool is_Position_allowed(Tango::AttReqType type);
/**
 *	Attribute Velocity related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Velocity(Tango::Attribute &attr);
	virtual void write_Velocity(Tango::WAttribute &attr);
	virtual bool is_Velocity_allowed(Tango::AttReqType type);
/**
 *	Attribute Acceleration related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Acceleration(Tango::Attribute &attr);
	virtual void write_Acceleration(Tango::WAttribute &attr);
	virtual bool is_Acceleration_allowed(Tango::AttReqType type);
/**
 *	Attribute Deceleration related methods
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_Deceleration(Tango::Attribute &attr);
	virtual void write_Deceleration(Tango::WAttribute &attr);
	virtual bool is_Deceleration_allowed(Tango::AttReqType type);
/**
 *	Attribute CreepSpeed related methods
 *	Description: The speed at which moves with a non-zero creep distance will stop
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
	virtual void read_CreepSpeed(Tango::Attribute &attr);
	virtual void write_CreepSpeed(Tango::WAttribute &attr);
	virtual bool is_CreepSpeed_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : Pm600::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command Stop related method
	 *	Description: 
	 *
	 */
	virtual void stop();
	virtual bool is_Stop_allowed(const CORBA::Any &any);
	/**
	 *	Command SetPosition related method
	 *	Description: Set actual position
	 *
	 *	@param argin Actual position
	 */
	virtual void set_position(Tango::DevDouble argin);
	virtual bool is_SetPosition_allowed(const CORBA::Any &any);
	/**
	 *	Command Forward related method
	 *	Description: Move forward
	 *
	 *	@param argin 
	 */
	virtual void forward(Tango::DevDouble argin);
	virtual bool is_Forward_allowed(const CORBA::Any &any);
	/**
	 *	Command Backward related method
	 *	Description: Move backward
	 *
	 *	@param argin 
	 */
	virtual void backward(Tango::DevDouble argin);
	virtual bool is_Backward_allowed(const CORBA::Any &any);
	/**
	 *	Command Reset related method
	 *	Description: This command will reset the tracking abort, stall abort, timeout abort or user (command) abort conditions and re-enable the servo control loop.
	 *               It will also set the Command position to be equal to the Actual position.
	 *
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);
	/**
	 *	Command GoHome related method
	 *	Description: Homing
	 *
	 */
	virtual void go_home();
	virtual bool is_GoHome_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : Pm600::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(Pm600::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
	void SendReceive(const string & command, string & response);
	void SendReceive(const string & command, int & val);
	void SendReceive(const string & command, double & val);

/*----- PROTECTED REGION END -----*/	//	Pm600::Additional Method prototypes
};

/*----- PROTECTED REGION ID(Pm600::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	Pm600::Additional Classes Definitions

}	//	End of namespace

#endif   //	Pm600_H
