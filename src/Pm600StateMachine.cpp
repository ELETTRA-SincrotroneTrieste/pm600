/*----- PROTECTED REGION ID(Pm600StateMachine.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        Pm600StateMachine.cpp
//
// description : State machine file for the Pm600 class
//
// project :     Pm600 McLennan
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <Pm600.h>

/*----- PROTECTED REGION END -----*/	//	Pm600::Pm600StateMachine.cpp

//================================================================
//  States  |  Description
//================================================================


namespace Pm600_ns
{
//=================================================
//		Attributes Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : Pm600::is_Position_allowed()
 *	Description : Execution allowed for Position attribute
 */
//--------------------------------------------------------
bool Pm600::is_Position_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Not any excluded states for Position attribute in Write access.
	/*----- PROTECTED REGION ID(Pm600::PositionStateAllowed_WRITE) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pm600::PositionStateAllowed_WRITE

	//	Not any excluded states for Position attribute in read access.
	/*----- PROTECTED REGION ID(Pm600::PositionStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pm600::PositionStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Pm600::is_Velocity_allowed()
 *	Description : Execution allowed for Velocity attribute
 */
//--------------------------------------------------------
bool Pm600::is_Velocity_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Not any excluded states for Velocity attribute in Write access.
	/*----- PROTECTED REGION ID(Pm600::VelocityStateAllowed_WRITE) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pm600::VelocityStateAllowed_WRITE

	//	Not any excluded states for Velocity attribute in read access.
	/*----- PROTECTED REGION ID(Pm600::VelocityStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pm600::VelocityStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Pm600::is_Acceleration_allowed()
 *	Description : Execution allowed for Acceleration attribute
 */
//--------------------------------------------------------
bool Pm600::is_Acceleration_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Not any excluded states for Acceleration attribute in Write access.
	/*----- PROTECTED REGION ID(Pm600::AccelerationStateAllowed_WRITE) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pm600::AccelerationStateAllowed_WRITE

	//	Not any excluded states for Acceleration attribute in read access.
	/*----- PROTECTED REGION ID(Pm600::AccelerationStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pm600::AccelerationStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Pm600::is_Deceleration_allowed()
 *	Description : Execution allowed for Deceleration attribute
 */
//--------------------------------------------------------
bool Pm600::is_Deceleration_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Not any excluded states for Deceleration attribute in Write access.
	/*----- PROTECTED REGION ID(Pm600::DecelerationStateAllowed_WRITE) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pm600::DecelerationStateAllowed_WRITE

	//	Not any excluded states for Deceleration attribute in read access.
	/*----- PROTECTED REGION ID(Pm600::DecelerationStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pm600::DecelerationStateAllowed_READ
	return true;
}


//=================================================
//		Commands Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : Pm600::is_Stop_allowed()
 *	Description : Execution allowed for Stop attribute
 */
//--------------------------------------------------------
bool Pm600::is_Stop_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Stop command.
	/*----- PROTECTED REGION ID(Pm600::StopStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pm600::StopStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Pm600::is_SetPosition_allowed()
 *	Description : Execution allowed for SetPosition attribute
 */
//--------------------------------------------------------
bool Pm600::is_SetPosition_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for SetPosition command.
	/*----- PROTECTED REGION ID(Pm600::SetPositionStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pm600::SetPositionStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Pm600::is_Forward_allowed()
 *	Description : Execution allowed for Forward attribute
 */
//--------------------------------------------------------
bool Pm600::is_Forward_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Forward command.
	/*----- PROTECTED REGION ID(Pm600::ForwardStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pm600::ForwardStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Pm600::is_Backward_allowed()
 *	Description : Execution allowed for Backward attribute
 */
//--------------------------------------------------------
bool Pm600::is_Backward_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Backward command.
	/*----- PROTECTED REGION ID(Pm600::BackwardStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pm600::BackwardStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Pm600::is_Reset_allowed()
 *	Description : Execution allowed for Reset attribute
 */
//--------------------------------------------------------
bool Pm600::is_Reset_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for Reset command.
	/*----- PROTECTED REGION ID(Pm600::ResetStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pm600::ResetStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Pm600::is_GoHome_allowed()
 *	Description : Execution allowed for GoHome attribute
 */
//--------------------------------------------------------
bool Pm600::is_GoHome_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for GoHome command.
	/*----- PROTECTED REGION ID(Pm600::GoHomeStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Pm600::GoHomeStateAllowed
	return true;
}


/*----- PROTECTED REGION ID(Pm600::Pm600StateAllowed.AdditionalMethods) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	Pm600::Pm600StateAllowed.AdditionalMethods

}	//	End of namespace
